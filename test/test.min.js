(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){

/**
 * generates
 * @module js/tokens
 */
var nextKey=0;
var proto={
  store:function(data){
    var key=nextKey++;
    this[key]=data;
    return key;
  },
  all:function(call){
    for (var key in this) {
      if (this.hasOwnProperty(key)){
        call(Number(key),this[key]);
      }
    }
  }
};
module.exports=function(){
};
module.exports.prototype=proto;

},{}],2:[function(require,module,exports){
describe("A suite is just a function", function() {
  var a;

  it("and so is a spec", function() {
    a = true;

    expect(a).toBe(true);
  });
});
describe("sync tokens", function()
{
  var Tokens=require("../js/tokens.js");
  beforeEach(function()
  {
    this.size=20;
    this.tokens=new Tokens();
    this.key=Array(this.size);
    this.value=Array(this.size);
    var i;
    for(i=0;i<this.size;i++){
      this.value[i]=Math.random();
      this.key[i]=this.tokens.store(this.value[i]);
    }
  });
  it("can match key value", function()
  {
    for(var i=0;i<this.size;i++){
      expect(this.tokens[this.key[i]]).toBe(this.value[i]);
    }
  });
  it("can return uniq sorted token", function()
  {
    var key2=_.uniq(this.key);
    key2.sort(function(a,b){return a-b;});
    expect(key2.length).toEqual(this.key.length);
    expect(key2).toEqual(this.key);
  });
  it("can call all", function()
  {
    var self=this;
    var i=0;
    this.tokens.all(function(key,value){
      expect(self.key[i]).toBe(key);
      expect(self.value[i]).toBe(value);
      i++;
    });
  });
  it("can delete key", function()
  {
    var count=0;
    for(i=0;i<this.size;i++){
      if(this.value[i]>=0.5){
        delete this.tokens[this.key[i]];
        count++;
      }else{
      }
    }
    this.tokens.all(function(key,value){
      count++;
      expect(value).toBeLessThan(0.5);
    });
    expect(count).toBe(this.size);
  });
});

},{"../js/tokens.js":1}]},{},[2])